#lang racket
(define (element-of-set? x set)
  (cond ((null? set) false)
        ((= x (car set)) true)
        ((< x (car set)) false)
        (else (element-of-set? x (cdr set)))))

(define (intersection-set set1 set2)
  (if (or (null? set1) (null? set2))
      '()
      (let ((x1 (car set1)) (x2 (car set2)))
        (cond ((= x1 x2)
               (cons x1 (intersection-set (cdr x1)
                                          (cdr x2))))
              ((< x1 x2)
               (intersection-set (cdr set1) set2))
              ((< x2 x1)
               (intersection-set set1 (cdr set2)))))))

; 2018/08/01
; exercise 2.61 - 2.62

; 2.61
(define (adjoin-set x set)
  (cond ((= x (car set)) set)
        ((< x (car set)) (cons x set))
        (else
         (cons (car set)
               (adjoin-set x (cdr set))))))

; test
(define set1 (list 1 2 3 4 5 8 9 10))
(adjoin-set 6 set1)
; In the worst case, the item is larger than
; all of the elements in the set
; On the average we should expect to have to examine about
; half of the items in the set to make the adjoin operation work
; Thus, the average number of steps required will be about n/2

; 2.62
(define (union-set set1 set2)
  (cond ((null? set1) set2)
        ((null? set2) set1)
        (else
         (let ((x1 (car set1)) (x2 (car set2)))
           (cond ((= x1 x2)
                  (cons x1 (union-set (cdr set1)
                                      (cdr set2))))
                 ((< x1 x2)
                  (cons x1 (union-set (cdr set1)
                                      set2)))
                 ((< x2 x1)
                  (cons x2 (union-set set1
                                      (cdr set2)))))))))

; test
(define set2 (list 1 3 5 7))
(define set3 (list 2 4 6 8))
(union-set set2 set3)