#lang racket
(define (element-of-set? x set)
  (cond ((null? set) false)
        ((equal? x (car set)) true)
        (else (element-of-set? x (cdr set)))))

(define (adjoin-set x set)
  (if (element-of-set? x set)
      set
      (cons x set)))

(define (intersection-set set1 set2)
  (cond ((or (null? set1) (null? set2)) '())
        ((element-of-set? (car set1) set2)
         (cons (car set1) (intersection-set (cdr set1) set2)))
        (else (intersection-set (cdr set1) set2))))

; 2018/08/01
; exercise 2.59 - 2.60

; 2.59
(define (union-set set1 set2)
  (cond ((null? set1) set2)
        ((null? set2) set1)
        ((element-of-set? (car set1) set2)
         (union-set (cdr set1) set2))
        (else
         (cons (car set1)
               (union-set (cdr set1) set2)))))

; 2.60
; element-of-set? and intersection-set
; could still be used when elements in set can be duplicated
; adjoin-set, union-set should be reimplement
(define (dup-adjoin-set x set)
  (cons x set))

(define (dup-union-set set1 set2)
  (append set1 set2))

; test
(define set1 (list 1 2 3))
(define set2 (list 4 5 6))
(union-set set1 set2)

(define dup-set1 (list 2 3 2 1 3 2 2 ))
(define dup-set2 (list 3 2 1 1 3 5 5 7 7 6 6 6))

(dup-union-set dup-set1 dup-set2)
(element-of-set? 3 dup-set1)

; dup-union-set has theta(1) time complexity compare to
; non-duplicate union-set, which has time complexity of
; theta(n*n)

; dup-adjoin-set has theta(1) time complexity compare to
; non-duplicate adjoin-set, which has time complexity of
; theta(n)

; 我只会在集合的并操作和集合的插入操作非常非常频繁的时候使用这样的表示方法,
; 而且前提是存储空间要足够充裕


