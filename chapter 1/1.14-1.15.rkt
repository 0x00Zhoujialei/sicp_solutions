;exercise 1.14 - 1.15
; 2018/05/07

; 1.14 详见http://wiki.drewhess.com/wiki/SICP_exercise_1.14
; 记N(amount, kind-of-coin)这个函数,
; 它表示以总数为amonut的钱在kind-of-coin种面额的硬币下换开钱的方案总数
; N(n - (n - 1),1) = 1 + 1 + 1 = 3
; N(n − (n − 2),1) = 1 + 1 + N(n − (n − 1),1) = 1 + 1 + 3 = 5
; N(n − (n − 3),1) = 1 + 1 + N(n − (n − 2),1) = 1 + 1 + 5 = 7
; N(n − (n − 4),1) = 1 + 1 + N(n − (n − 3),1) = 1 + 1 + 7 = 9
; 容易得到N(n, 1) = 2n + 1，即执行步骤为theta(n)
; 由于applicative-order的原因，函数也需要正比于n的执行空间
; 由题设，我们需要得到N(n, 3)的情况
; 先从N(n, 2)开始
; N(n, 2) = 1 + N(n-5, 2) + N(n, 1)
; N(n, 2)执行到n<=0时需要n/5次，N(n, 1) = 2n + 1，容易得到N(n, 2）的执行
; 步骤为theta(n^2 / 5), 所需空间也正比于theta(n^2 / 5)
; N(n, 3) = 1 + N(n-10, 3) + N(n, 2)
; N(n, 3)执行到n<=0时需要n/10次, N(n, 2) = n^2 / 5，则
; N(n, 3)的执行步骤为theta(n^3 / 50), 所需空间也正比于theta(n^3 / 50)
; 即原题设所求的时间空间复杂度都为theta(n^3)

; 1.15
; 12.15 -> 4.05 -> 1.35 -> 0.45 -> 0.15 -> 0.05, 6-1=5次
; 时间空间复杂度都为logn （算法导论已经被我丢到不知道哪里去了，捡起来的时候到了）

